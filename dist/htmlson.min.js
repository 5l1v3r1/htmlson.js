(function(a){a.fn.htmlson=function(b){function c(){m=`<thead>`,k=Object.keys(b.data[0]);for(var p=0;p<k.length;p++)m+=void 0===b.headers[p]?`<th>${k[p]}</th>`:`<th>${b.headers[p]}</th>`;for(var p in m+=`</thead>`,n=`<tbody>`,b.data){n+=`<tr>`;var q=a.map(b.data[p],function(u){return u});for(var r in q)if(!e(q[r]))n+=`<td>${q[r]}</td>`;else{n+=`<td><ul>`;var s=a.map(q[r],function(u){return u});for(var t in s)n+=`<li>${s[t]}</li>`;n+=`</ul></td>`}n+=`</tr>`}n+=`</tbody>`,g.html(m+n)}function e(p){return p&&'object'==typeof p&&p.constructor===Object}function f(p){var q=0;return p.children&&p.children.forEach(function(r){var s=f(r);s>q&&(q=s)}),1+q}var g=this,k=[],m='',n='';if('object'!=typeof b.data)return void console.error('htmlson.js Error: No data passed!');if('object'!=typeof b.headers&&(b.headers={}),'boolean'!=typeof b.debug&&(b.debug=!1),c(),g.addRow=function(p){return!1===e(p)?void console.error('htmlson.js Error: new row must be of type object!'):void(b.data.push(p),c())},g.removeRow=function(p){return'undefined'==typeof b.data[p]?void console.error('htmlson.js Error: invalid!'):void(b.data.splice(p,1),c())},b.debug){var o=function(p){console.log(p)};o('debug: true'),o('object: '+JSON.stringify(b.data)),o('object depth: '+f(b.data)),o('auto headers: '+JSON.stringify(k)),o('headers set: '+JSON.stringify(b.headers)),o('table head: '+m),o('table body: '+n)}return g}})(jQuery);