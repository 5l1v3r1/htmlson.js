!function(t){t.fn.htmlson=function(e){var r=this,o=[],a="",n="";if("object"==typeof e.data){if("object"!=typeof e.headers&&(e.headers={}),"boolean"!=typeof e.debug&&(e.debug=!1),i(),r.addRow=function(t){!1!==s(t)?(e.data.push(t),i()):console.error("htmlson.js Error: new row must be of type object!")},r.removeRow=function(t){void 0!==e.data[t]?(e.data.splice(t,1),i()):console.error("htmlson.js Error: invalid!")},e.debug){var d=function(t){console.log(t)};d("debug: true"),d("object: "+JSON.stringify(e.data)),d("object depth: "+function t(e){var r=0;e.children&&e.children.forEach(function(e){var o=t(e);o>r&&(r=o)});return 1+r}(e.data)),d("auto headers: "+JSON.stringify(o)),d("headers set: "+JSON.stringify(e.headers)),d("table head: "+a),d("table body: "+n)}return r}function i(){if(t.isEmptyObject(e.data))r.html("");else{a="<thead>",o=Object.keys(e.data[0]);for(var d=0;d<o.length;d++)void 0===e.headers[d]?a+="<th>"+o[d]+"</th>":a+="<th>"+e.headers[d]+"</th>";a+="</thead>",n="<tbody>";for(var d in e.data){n+="<tr>";var i=t.map(e.data[d],function(t,e){return t});for(var c in i)if(s(i[c])){n+="<td><ul>";var f=t.map(i[c],function(t,e){return t});for(var u in f)n+="<li>"+f[u]+"</li>";n+="</ul></td>"}else n+="<td>"+i[c]+"</td>";n+="</tr>"}n+="</tbody>",r.html(a+n)}}function s(t){return t&&"object"==typeof t&&t.constructor===Object}console.error("htmlson.js Error: No data passed!")}}(jQuery);